name: Deploy AFL MCP Server

on:
    pull_request:
        branches:
            - main

permissions:
    contents: read
    id-token: write
    pull-requests: write

jobs:
    test-and-coverage:
      name: Run Tests and Generate Coverage
      runs-on: ubuntu-latest
      steps:
          - uses: actions/checkout@v4
            name: Checkout code

          - name: Setup .NET
            uses: actions/setup-dotnet@v4
            with:
              dotnet-version: '9.0.x'

          - name: Restore dependencies
            run: dotnet restore

          - name: Build solution
            run: dotnet build --configuration Release --no-restore

          - name: Run tests with coverage
            run: |
                dotnet test test/mcp-afl-server.UnitTests/mcp-afl-server.UnitTests.csproj \
                  --configuration Release \
                  --no-build \
                  --verbosity normal \
                  --collect:"XPlat Code Coverage" \
                  --results-directory ./coverage-results/ \
                  --logger trx \
                  --logger "console;verbosity=detailed"

          - name: Generate coverage report
            run: |
                dotnet tool install -g dotnet-reportgenerator-globaltool
                reportgenerator \
                  -reports:"./coverage-results/**/coverage.cobertura.xml" \
                  -targetdir:"./coverage-report" \
                  -reporttypes:"Html;Cobertura;JsonSummary" \
                  -verbosity:Warning

          - name: Upload coverage reports to artifacts
            uses: actions/upload-artifact@v4
            with:
                name: coverage-report
                path: ./coverage-report/
                retention-days: 30

          - name: Comment coverage on PR
            if: github.event_name == 'pull_request'
            uses: actions/github-script@v7
            with:
              script: |
                  const fs = require('fs');
                  const path = './coverage-report/Summary.json';
                  
                  if (fs.existsSync(path)) {
                    const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
                    const lineCoverage = coverage.summary.linecoverage;
                    const branchCoverage = coverage.summary.branchcoverage;
                    
                    const coverageComment = `## 📊 Code Coverage Report
                  
                  | Metric | Percentage |
                  |--------|------------|
                  | **Line Coverage** | ${lineCoverage}% |
                  | **Branch Coverage** | ${branchCoverage}% |
                  
                  📁 [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                  
                  ${lineCoverage >= 80 ? '✅ Great coverage!' : '⚠️ Consider adding more tests to improve coverage.'}`;
                    
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: coverageComment
                    });
                  } 
                    
          - name: Generate coverage report
            run: |
                dotnet tool install -g dotnet-reportgenerator-globaltool
                reportgenerator \
                  -reports:"./coverage-results/**/coverage.cobertura.xml" \
                  -targetdir:"./coverage-report" \
                  -reporttypes:"Html;Cobertura;JsonSummary" \
                  -verbosity:Warning

          - name: Upload coverage reports to artifacts
            uses: actions/upload-artifact@v4
            with:
              name: coverage-report
              path: ./coverage-report/
              retention-days: 30

          - name: Comment coverage on PR
            if: github.event_name == 'pull_request'
            uses: actions/github-script@v7
            with:
              script: |
                  const fs = require('fs');
                  const path = './coverage-report/Summary.json';
                  
                  if (fs.existsSync(path)) {
                    const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
                    const lineCoverage = coverage.summary.linecoverage;
                    const branchCoverage = coverage.summary.branchcoverage;
                    
                    const coverageComment = `## 📊 Code Coverage Report
                  
                  | Metric | Percentage |
                  |--------|------------|
                  | **Line Coverage** | ${lineCoverage}% |
                  | **Branch Coverage** | ${branchCoverage}% |
                  
                  📁 [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                  
                  ${lineCoverage >= 80 ? '✅ Great coverage!' : '⚠️ Consider adding more tests to improve coverage.'}`;
                    
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: coverageComment
                    });
                  }
        
    build-container-image:
        name: Build Docker Image
        needs: test-and-coverage
        runs-on: ubuntu-latest
        outputs:
            loginServer: ${{ steps.getacrserver.outputs.loginServer }}
        defaults:
            run:
                working-directory: './src'
        steps:
            - uses: actions/checkout@v4
              name: Checkout code

            - uses: azure/login@v2
              name: Login to Azure
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Set up Docker buildx
              uses: docker/setup-buildx-action@v3

            - name: Get ACR name
              id: getacrname
              run: |
                acrName=$(az acr list --resource-group ${{ secrets.RG_NAME }} --query "[0].name" -o tsv)
                echo "acrName=$acrName" >> "$GITHUB_OUTPUT"

            - name: Get ACR Server
              id: getacrserver
              run: |
                loginServer=$(az acr list --resource-group ${{ secrets.RG_NAME }} --query "[0].loginServer" -o tsv)
                echo "loginServer=$loginServer" >> "$GITHUB_OUTPUT"
                
            - name: Login to Azure Container Registry
              run: az acr login --name ${{ steps.getacrname.outputs.acrName }}

            - name: Build Docker Image
              run: |
                docker build -t ${{ steps.getacrserver.outputs.loginServer }}/afl-mcp-server:${{ github.sha }} .

            - name: Push Docker Image
              run: |
                docker push ${{ steps.getacrserver.outputs.loginServer }}/afl-mcp-server:${{ github.sha }}

    lint-bicep:
        name: Run Bicep Linter
        needs: test-and-coverage
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              name: Checkout code
            
            - name: Run Bicep Linter
              run: az bicep build --file './infra/deployMcpServer.bicep'

    validate-bicep:
        name: Validate Bicep Template
        needs: [lint-bicep, build-container-image]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              name: Checkout code

            - uses: azure/login@v2
              name: Login to Azure
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - uses: azure/bicep-deploy@v2
              name: Run preflight validation
              with:
                type: deployment
                scope: subscription
                location: australiaeast
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                name: ${{ github.run_number }}
                template-file: './infra/deployMcpServer.bicep'
                parameters-file: './infra/parameters.deployMcpServer.bicepparam'
                operation: validate

    preview-bicep:
        name: Preview Bicep Deployment
        needs: [lint-bicep, build-container-image, validate-bicep]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              name: Checkout code
            
            - uses: azure/login@v2
              name: Login to Azure
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - uses: azure/bicep-deploy@v2
              name: Perform What-If
              with:
                type: deployment
                operation: whatIf
                scope: subscription
                validation-level: 'providerNoRbac'
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                location: australiaeast
                name: ${{ github.run_number }}
                template-file: './infra/deployMcpServer.bicep'
                parameters-file: './infra/parameters.deployMcpServer.bicepparam'
                parameters: '{"imageName": "${{ needs.build-container-image.outputs.loginServer}}/afl-mcp-server:${{ github.sha }}"}'

    deploy-mcp-server:
        name: Deploy MCP Server
        needs: [lint-bicep, build-container-image, validate-bicep, preview-bicep]
        runs-on: ubuntu-latest
        environment: prod
        steps:
            - uses: actions/checkout@v4
              name: Checkout code
            
            - uses: azure/login@v2
              name: Login to Azure
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - uses: azure/bicep-deploy@v2
              name: Deploy Bicep Template
              with:
                type: deployment
                operation: create
                scope: subscription
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                location: australiaeast
                name: ${{ github.run_number }}
                template-file: './infra/deployMcpServer.bicep'
                parameters-file: './infra/parameters.deployMcpServer.bicepparam'
                parameters: '{"imageName": "${{ needs.build-container-image.outputs.loginServer}}/afl-mcp-server:${{ github.sha }}"}'

            
